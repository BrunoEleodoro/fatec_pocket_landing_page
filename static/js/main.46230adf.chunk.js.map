{"version":3,"sources":["logo.svg","pages/home/Home.js","components/AppBar/MenuItems.js","components/AppBar/AppBarMobile.js","components/AppBar/AppBarTablet.js","components/AppBar.js","pages/contact/Contact.js","pages/about/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","behavior","BEHAVIOR","fluid","span","align","ALIGNMENT","center","onClick","window","open","kind","KIND","primary","secondary","style","marginLeft","src","width","menuItems","label","id","withRouter","React","useState","value","setValue","$align","ALIGN","left","options","placeholder","onChange","params","right","map","item","key","to","href","ContactPage","AboutPage","engine","Styletron","App","useEffect","theme","LightTheme","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,oKCS5B,SAASC,IAEpB,OACI,6BACI,kBAAC,IAAD,CAAMC,SAAUC,IAASC,OACrB,kBAAC,IAAD,CAAMC,KAAM,CAAC,GAAI,EAAG,GAAIC,MAAOC,IAAUC,QACrC,6BACA,kBAAC,IAAD,KAAI,4CACJ,6BACA,kBAAC,IAAD,2GACA,6BACA,kBAAC,IAAD,CAAQC,QAAS,WACbC,OAAOC,KAAK,yCAA0C,WACvDC,KAAMC,IAAKC,SAFd,UAGA,kBAAC,IAAD,CAAQL,QAAS,WACbC,OAAOC,KAAK,qCAAsC,WACnDC,KAAMC,IAAKE,UAAWC,MAAO,CAAEC,WAAY,SAF9C,WAIJ,kBAAC,IAAD,CAAMZ,KAAM,CAAC,GAAI,EAAG,KACpB,kBAAC,IAAD,CAAMA,KAAM,CAAC,GAAI,EAAG,GAAIC,MAAOC,IAAUC,QACrC,yBAAKU,IAAI,oGAAoGC,MAAM,Y,4EC7B5HC,EAAY,CACnB,CAAEC,MAAO,OAAQC,GAAI,SACrB,CAAED,MAAO,QAASC,GAAI,UACtB,CAAED,MAAO,aAAcC,GAAI,a,QC6BhBC,mBApBf,WAAyB,IAAD,EACMC,IAAMC,SAAS,IADrB,mBACbC,EADa,KACNC,EADM,KAGpB,OAAQ,kBAAC,IAAD,KACJ,kBAAC,IAAD,CAAgBC,OAAQC,IAAMC,MAC1B,kBAAC,IAAD,sBAEJ,kBAAC,IAAD,CAAgBF,OAAQC,IAAMrB,SAC9B,kBAAC,IAAD,CACIuB,QAASX,EACTM,MAAOA,EACPM,YAAY,OACZC,SAAU,SAAAC,GAAM,OAAIP,EAASO,EAAOR,c,gBCsBjCH,mBAzBf,WAAyB,IAAD,EACMC,IAAMC,SAAS,IADrB,mBAGpB,OAHoB,UAGZ,kBAAC,IAAD,KACJ,kBAAC,IAAD,CAAsBG,OAAQC,IAAMC,MAChC,kBAAC,IAAD,sBAEJ,kBAAC,IAAD,CAAsBF,OAAQC,IAAMrB,SACpC,kBAAC,IAAD,CAAsBoB,OAAQC,IAAMM,OAC/Bf,EAAUgB,KAAI,SAACC,GACZ,OAAO,kBAAC,IAAD,CAAsBC,IAAKD,EAAKf,IACnC,kBAAC,IAAD,CAAMiB,GAAIF,EAAKf,IACX,kBAAC,IAAD,CAAYkB,KAAK,KACZH,EAAKhB,iBCTnBE,aApBf,WAEI,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMlB,KAAM,CAAC,GAAI,EAAG,IAChB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAMA,KAAM,CAAC,EAAG,GAAI,IAChB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAMA,KAAM,CAAC,EAAG,EAAG,KACf,kBAAC,EAAD,YCfL,SAASoC,IACpB,OAAQ,wCCDG,SAASC,IACpB,OAAQ,sCCgBZ,IAAMC,EAAS,IAAIC,IAoCJC,MAlCf,WAII,OAHAC,qBAAU,eAIN,kBAAC,IAAD,CAAmBpB,MAAOiB,GACtB,kBAAC,IAAD,CAAcI,MAAOC,KAEjB,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UACR,kBAACP,EAAD,OAEJ,kBAAC,IAAD,CAAOO,KAAK,YACR,kBAACR,EAAD,OAEJ,kBAAC,IAAD,CAAOQ,KAAK,KACR,kBAAChD,EAAD,YC3BRiD,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46230adf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, DarkTheme, BaseProvider, styled } from 'baseui';\nimport { StatefulInput } from 'baseui/input';\nimport { Button, KIND } from \"baseui/button\";\nimport { Grid, Cell, BEHAVIOR, ALIGNMENT } from \"baseui/layout-grid\"\nimport { H1, H2, H3, H4, H5, H6 } from 'baseui/typography';\n\nexport default function HomePage() {\n\n    return (\n        <div>\n            <Grid behavior={BEHAVIOR.fluid}>\n                <Cell span={[12, 4, 6]} align={ALIGNMENT.center}>\n                    <br />\n                    <H1><b>Fatec Pocket</b></H1>\n                    <br />\n                    <H6>Aplicativo para estudantes da Fatec, baixe agora para ter uma experiÃªncia totalmente inovadora.</H6>\n                    <br />\n                    <Button onClick={() => {\n                        window.open(\"https://fatecpocket.brunoeleodoro.com/\", '_blank');\n                    }} kind={KIND.primary}>TESTAR</Button>\n                    <Button onClick={() => {\n                        window.open(\"https://fatecpocket.page.link/6SuK\", '_blank');\n                    }} kind={KIND.secondary} style={{ marginLeft: '10px' }}>BAIXAR</Button>\n                </Cell>\n                <Cell span={[12, 1, 2]}></Cell>\n                <Cell span={[12, 3, 4]} align={ALIGNMENT.center} >\n                    <img src=\"https://raw.githubusercontent.com/BrunoEleodoro/fatec_pocket_landing_page/master/images/Login.png\" width=\"100%\" />\n                </Cell>\n            </Grid>\n        </div>\n\n    );\n}","export var menuItems = [\n    { label: \"Home\", id: \"/home\" },\n    { label: \"About\", id: \"/about\" },\n    { label: \"Contact Us\", id: \"/contact\" },\n]","import React from \"react\"\nimport {\n    HeaderNavigation,\n    ALIGN,\n    StyledNavigationItem as NavigationItem,\n    StyledNavigationList as NavigationList,\n} from 'baseui/header-navigation';\nimport { StyledLink as Link } from 'baseui/link';\nimport { Button } from 'baseui/button';\nimport { Select } from \"baseui/select\";\nimport { menuItems } from \"./MenuItems\"\nimport { withRouter } from \"react-router-dom\";\nfunction AppBarMobile() {\n    const [value, setValue] = React.useState([]);\n\n    return (<HeaderNavigation>\n        <NavigationList $align={ALIGN.left}>\n            <NavigationItem>Fatec Pocket</NavigationItem>\n        </NavigationList>\n        <NavigationList $align={ALIGN.center} />\n        <Select\n            options={menuItems}\n            value={value}\n            placeholder=\"Menu\"\n            onChange={params => setValue(params.value)}\n\n        />\n\n    </HeaderNavigation>\n    )\n}\n\nexport default withRouter(AppBarMobile)","import React from \"react\"\nimport {\n    HeaderNavigation,\n    ALIGN,\n    StyledNavigationItem,\n    StyledNavigationList,\n} from 'baseui/header-navigation';\nimport { StyledLink } from \"baseui/link\";\nimport { Button } from 'baseui/button';\nimport { Select } from \"baseui/select\";\nimport { menuItems } from \"./MenuItems\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useRouteMatch,\n    useParams,\n    withRouter\n} from \"react-router-dom\";\n\nfunction AppBarTablet() {\n    const [value, setValue] = React.useState([]);\n\n    return (<HeaderNavigation>\n        <StyledNavigationList $align={ALIGN.left}>\n            <StyledNavigationItem>Fatec Pocket</StyledNavigationItem>\n        </StyledNavigationList>\n        <StyledNavigationList $align={ALIGN.center} />\n        <StyledNavigationList $align={ALIGN.right}>\n            {menuItems.map((item) => {\n                return <StyledNavigationItem key={item.id}>\n                    <Link to={item.id}>\n                        <StyledLink href=\"#\">\n                            {item.label}\n                        </StyledLink>\n                    </Link>\n\n                </StyledNavigationItem>\n            })}\n        </StyledNavigationList>\n\n    </HeaderNavigation>\n    )\n}\n\nexport default withRouter(AppBarTablet)","import React from \"react\"\nimport { Grid, Cell, ALIGNMENT, BEHAVIOR } from 'baseui/layout-grid';\nimport AppBarMobile from \"./AppBar/AppBarMobile\";\nimport AppBarTablet from \"./AppBar/AppBarTablet\";\nimport {withRouter} from \"react-router-dom\"\nfunction AppBar() {\n\n    return (\n        <div>\n            <Grid >\n                <Cell span={[12, 0, 0]} >\n                    <AppBarMobile/>\n                </Cell>\n                <Cell span={[0, 12, 0]}>\n                    <AppBarTablet/>\n                </Cell>\n                <Cell span={[0, 0, 12]}>\n                    <AppBarTablet/>\n                </Cell>\n            </Grid>\n        </div>\n    );\n\n}\n\nexport default withRouter(AppBar)","import React from 'react'\n\nexport default function ContactPage() {\n    return (<div>Contact</div>)\n}","import React from 'react'\n\nexport default function AboutPage() {\n    return (<div>About</div>)\n}","import React, { useState,useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./pages/home/Home\"\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, DarkTheme, BaseProvider, styled } from 'baseui';\nimport AppBar from './components/AppBar';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport HomePage from './pages/home/Home';\nimport ContactPage from './pages/contact/Contact';\nimport AboutPage from './pages/about/About';\n\n\nconst engine = new Styletron();\n\nfunction App() {\n    useEffect(() => {\n        // document.body.style.backgroundColor='#000'    \n    });\n    return (\n        <StyletronProvider value={engine}>\n            <BaseProvider theme={LightTheme}>\n                \n                <Router>\n                    {/* <AppBar/> */}\n                    <Switch>\n                        <Route path=\"/about\">\n                            <AboutPage />\n                        </Route>\n                        <Route path=\"/contact\">\n                            <ContactPage />\n                        </Route>\n                        <Route path=\"/\">\n                            <HomePage />\n                        </Route>\n                    </Switch>\n                </Router>\n                {/* <Button onClick={() => {\n                if (theme == 1) {\n                    changeTheme(0)\n                } else {\n                    changeTheme(1)\n                }\n            }}>Change</Button> */}\n            </BaseProvider>\n        </StyletronProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}